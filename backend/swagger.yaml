openapi: 3.0.0
info:
  title: Social Network API
  version: 1.0.0
  description: API documentation for the Social Network application.
servers:
  - url: http://localhost:3000
    description: Development server
tags:
  - name: Users
    description: User management and authentication
  - name: Posts
    description: Post management
  - name: Comments
    description: Comment management
  - name: Likes
    description: Like management
paths:
  /users/register:
    post:
      summary: Register a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                username:
                  type: string
                  example: testuser
                email:
                  type: string
                  format: email
                  example: test@example.com
                password:
                  type: string
                  format: password
                  example: password123
                profilePicture:
                  type: string
                  format: url
                  example: https://example.com/profile.jpg
                  description: Optional URL for user's profile picture
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: User registered successfully
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      username:
                        type: string
                      email:
                        type: string
                      profilePicture:
                        type: string
        '400':
          description: Bad request (e.g., missing fields, user already exists)
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: User already exists
        '500':
          description: Server error
  /users/login:
    post:
      summary: Log in a user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: test@example.com
                password:
                  type: string
                  format: password
                  example: password123
      responses:
        '200':
          description: Logged in successfully
          headers:
            Set-Cookie:
              schema:
                type: string
                example: sessionId=someUserId; Path=/; HttpOnly
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Logged in successfully
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      username:
                        type: string
                      email:
                        type: string
        '400':
          description: Invalid credentials or missing fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Invalid credentials
        '500':
          description: Server error
  /users/logout:
    post:
      summary: Log out a user
      tags:
        - Users
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Logged out successfully
          headers:
            Set-Cookie:
              schema:
                type: string
                example: sessionId=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Logged out successfully
        '500':
          description: Server error
  /users/profile:
    get:
      summary: Get authenticated user's profile
      tags:
        - Users
      security:
        - cookieAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  username:
                    type: string
                  email:
                    type: string
                  profilePicture:
                    type: string
                  createdAt:
                    type: string
                    format: date-time
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized: No active session
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: User not found
        '500':
          description: Server error
  /users/status:
    get:
      summary: Check if a user is logged in
      tags:
        - Users
      security:
        - cookieAuth: []
      responses:
        '200':
          description: User is logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: User is logged in
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized: No active session
        '500':
          description: Server error
  /users/statistics:
    get:
      summary: Get user statistics
      tags:
        - Users
      responses:
        '200':
          description: User statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalUsers:
                    type: integer
                    example: 100
                  userWithMostPosts:
                    type: object
                    properties:
                      username:
                        type: string
                        example: user1
                      postCount:
                        type: integer
                        example: 50
                  postWithMostLikes:
                    type: object
                    properties:
                      postId:
                        type: string
                      postContent:
                        type: string
                        example: "My most liked post"
                      postAuthorUsername:
                        type: string
                        example: user2
                      likeCount:
                        type: integer
                        example: 100
                  userWithMostTotalLikes:
                    type: object
                    properties:
                      username:
                        type: string
                        example: user3
                      totalLikeCount:
                        type: integer
                        example: 200
        '500':
          description: Server error
  /users:
    get:
      summary: Get all users
      tags:
        - Users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    username:
                      type: string
                    email:
                      type: string
                    profilePicture:
                      type: string
                    createdAt:
                      type: string
                      format: date-time
        '500':
          description: Server error
  /users/{id}:
    get:
      summary: Get a user by ID
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the user to retrieve
      responses:
        '200':
          description: A single user
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  username:
                    type: string
                  email:
                    type: string
                  profilePicture:
                    type: string
                  createdAt:
                    type: string
                    format: date-time
        '400':
          description: Invalid user ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Invalid user ID
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: User not found
        '500':
          description: Server error
    patch:
      summary: Update a user by ID
      tags:
        - Users
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the user to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                profilePicture:
                  type: string
                  format: url
                  description: Optional URL for user's profile picture
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: User updated successfully
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                      username:
                        type: string
                      email:
                        type: string
                      profilePicture:
                        type: string
        '400':
          description: Bad request (e.g., invalid ID, missing body)
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Invalid user ID
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized: No active session
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: User not found
        '500':
          description: Server error
    delete:
      summary: Delete a user by ID (placeholder)
      tags:
        - Users
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the user to delete
      responses:
        '200':
          description: User deletion endpoint (functionality is a placeholder)
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Delete user with ID: {id}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized: No active session
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: User not found
        '500':
          description: Server error
  /posts:
    get:
      summary: Get all posts
      tags:
        - Posts
      responses:
        '200':
          description: A list of posts
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    userId:
                      type: object
                      properties:
                        _id:
                          type: string
                        username:
                          type: string
                        profilePicture:
                          type: string
                    content:
                      type: string
                    likesCount:
                      type: integer
                    commentsCount:
                      type: integer
                    createdAt:
                      type: string
                      format: date-time
        '500':
          description: Server error
    post:
      summary: Create a new post
      tags:
        - Posts
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                  example: This is my new post content.
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Post created successfully
                  post:
                    type: object
                    properties:
                      _id:
                        type: string
                      userId:
                        type: string
                      content:
                        type: string
                      createdAt:
                        type: string
                        format: date-time
        '400':
          description: Bad request (e.g., missing content)
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Content is required
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized: No active session
        '500':
          description: Server error
  /posts/{id}:
    get:
      summary: Get a post by ID
      tags:
        - Posts
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the post to retrieve
      responses:
        '200':
          description: A single post
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  userId:
                    type: object
                    properties:
                      _id:
                        type: string
                      username:
                        type: string
                      profilePicture:
                        type: string
                  content:
                    type: string
                  likesCount:
                    type: integer
                  commentsCount:
                    type: integer
                  createdAt:
                    type: string
                    format: date-time
        '400':
          description: Invalid post ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Invalid post ID
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Post not found
        '500':
          description: Server error
    patch:
      summary: Update a post by ID
      tags:
        - Posts
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the post to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                  example: Updated post content.
      responses:
        '200':
          description: Post updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Post updated successfully
                  post:
                    type: object
                    properties:
                      _id:
                        type: string
                      userId:
                        type: string
                      content:
                        type: string
                      createdAt:
                        type: string
                        format: date-time
        '400':
          description: Bad request (e.g., invalid ID, missing content)
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Invalid post ID
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized: No active session
        '403':
          description: Forbidden (user not authorized to edit this post)
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Forbidden: you can only edit your own posts
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Post not found
        '500':
          description: Server error
    delete:
      summary: Delete a post by ID
      tags:
        - Posts
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the post to delete
      responses:
        '200':
          description: Post deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Post deleted successfully
        '400':
          description: Invalid post ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Invalid post ID
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized: No active session
        '403':
          description: Forbidden (user not authorized to delete this post)
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Forbidden: you are not authorized to delete this post
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Post not found
        '500':
          description: Server error
  /comments:
    post:
      summary: Create a new comment
      tags:
        - Comments
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - postId
                - userId
                - content
              properties:
                postId:
                  type: string
                  example: 60d5ecf4f1b1c3001c8e4d1a
                userId:
                  type: string
                  example: 60d5ecf4f1b1c3001c8e4d1b
                content:
                  type: string
                  example: This is a new comment.
      responses:
        '201':
          description: Comment created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Comment created successfully
                  comment:
                    type: object
                    properties:
                      _id:
                        type: string
                      postId:
                        type: string
                      userId:
                        type: string
                      content:
                        type: string
                      createdAt:
                        type: string
                        format: date-time
        '400':
          description: Bad request (e.g., missing fields, post/user not found)
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Missing required fields
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized: No active session
        '404':
          description: Post or User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Post not found
        '500':
          description: Server error
  /comments/post/{postId}:
    get:
      summary: Get comments for a specific post
      tags:
        - Comments
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: string
          description: ID of the post to retrieve comments for
      responses:
        '200':
          description: A list of comments for the specified post
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    postId:
                      type: string
                    userId:
                      type: object
                      properties:
                        _id:
                          type: string
                        username:
                          type: string
                        profilePicture:
                          type: string
                    content:
                      type: string
                    createdAt:
                      type: string
                      format: date-time
        '400':
          description: Invalid post ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Invalid post ID
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Post not found
        '500':
          description: Server error
  /comments/{id}:
    get:
      summary: Get a comment by ID
      tags:
        - Comments
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the comment to retrieve
      responses:
        '200':
          description: A single comment
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  postId:
                    type: string
                  userId:
                    type: object
                    properties:
                      _id:
                        type: string
                      username:
                        type: string
                      profilePicture:
                        type: string
                  content:
                    type: string
                  createdAt:
                    type: string
                    format: date-time
        '400':
          description: Invalid comment ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Invalid comment ID
        '404':
          description: Comment not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Comment not found
        '500':
          description: Server error
    put:
      summary: Update a comment by ID
      tags:
        - Comments
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the comment to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                  example: Updated comment content.
      responses:
        '200':
          description: Comment updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Comment updated successfully
                  comment:
                    type: object
                    properties:
                      _id:
                        type: string
                      postId:
                        type: string
                      userId:
                        type: string
                      content:
                        type: string
                      createdAt:
                        type: string
                        format: date-time
        '400':
          description: Bad request (e.g., invalid ID, missing content)
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Invalid comment ID
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized: No active session
        '404':
          description: Comment not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Comment not found
        '500':
          description: Server error
    delete:
      summary: Delete a comment by ID
      tags:
        - Comments
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the comment to delete
      responses:
        '200':
          description: Comment deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Comment deleted successfully
        '400':
          description: Invalid comment ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Invalid comment ID
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized: No active session
        '404':
          description: Comment not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Comment not found
        '500':
          description: Server error
  /likes:
    post:
      summary: Like a post
      tags:
        - Likes
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - postId
              properties:
                postId:
                  type: string
                  description: ID of the post to like
                  example: 60d5ecf4f1b1c3001c8e4d1a
      responses:
        '201':
          description: Liked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Post liked successfully
                  like:
                    type: object
                    properties:
                      _id:
                        type: string
                      postId:
                        type: string
                      userId:
                        type: string
                      createdAt:
                        type: string
                        format: date-time
        '400':
          description: Bad request (e.g., missing postId, already liked)
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: User already liked this post
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized: No active session
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Post not found
        '500':
          description: Server error
    delete:
      summary: Unlike a post
      tags:
        - Likes
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - postId
              properties:
                postId:
                  type: string
                  description: ID of the post to unlike
                  example: 60d5ecf4f1b1c3001c8e4d1a
      responses:
        '200':
          description: Unliked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Post unliked successfully
        '400':
          description: Bad request (e.g., missing postId)
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Missing required fields
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized: No active session
        '404':
          description: Like not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Like not found or user did not like this post
        '500':
          description: Server error
  /likes/post/{postId}:
    get:
      summary: Get likes for a specific post
      tags:
        - Likes
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: string
          description: ID of the post to retrieve likes for
      responses:
        '200':
          description: A list of likes for the specified post
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    postId:
                      type: string
                    userId:
                      type: object
                      properties:
                        _id:
                          type: string
                        username:
                          type: string
                        profilePicture:
                          type: string
                    createdAt:
                      type: string
                      format: date-time
        '400':
          description: Invalid post ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Invalid post ID
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Post not found
        '500':
          description: Server error
  /likes/user/posts:
    get:
      summary: Get all posts liked by the authenticated user
      tags:
        - Likes
      security:
        - cookieAuth: []
      responses:
        '200':
          description: A list of posts liked by the user
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                        userId:
                          type: object
                          properties:
                            _id:
                              type: string
                            username:
                              type: string
                            profilePicture:
                              type: string
                        content:
                          type: string
                        likesCount:
                          type: integer
                        commentsCount:
                          type: integer
                        createdAt:
                          type: string
                          format: date-time
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized: No active session
        '500':
          description: Server error
components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionId
      description: Session ID cookie for authentication
