openapi: 3.0.0
info:
  title: Social Network API
  version: 1.0.0
  description: API documentation for the Social Network application.
servers:
  - url: http://localhost:3000
    description: Development server
tags:
  - name: Users
    description: User management and authentication
  - name: Posts
    description: Post management
  - name: Comments
    description: Comment management
  - name: Likes
    description: Like management
paths:
  /users/register:
    post:
      summary: Register a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                username:
                  type: string
                  example: testuser
                email:
                  type: string
                  format: email
                  example: test@example.com
                password:
                  type: string
                  format: password
                  example: password123
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: User registered successfully
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      username:
                        type: string
                      email:
                        type: string
        '400':
          description: Bad request (e.g., missing fields, user already exists)
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: User already exists
        '500':
          description: Server error
  /users/login:
    post:
      summary: Log in a user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: test@example.com
                password:
                  type: string
                  format: password
                  example: password123
      responses:
        '200':
          description: Logged in successfully
          headers:
            Set-Cookie:
              schema:
                type: string
                example: sessionId=someUserId; Path=/; HttpOnly
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Logged in successfully
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      username:
                        type: string
                      email:
                        type: string
        '400':
          description: Invalid credentials or missing fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Invalid credentials
        '500':
          description: Server error
  /users/logout:
    post:
      summary: Log out a user
      tags:
        - Users
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Logged out successfully
          headers:
            Set-Cookie:
              schema:
                type: string
                example: sessionId=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Logged out successfully
        '500':
          description: Server error
  /users/profile:
    get:
      summary: Get authenticated user's profile
      tags:
        - Users
      security:
        - cookieAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  username:
                    type: string
                  email:
                    type: string
                  createdAt:
                    type: string
                    format: date-time
                  updatedAt:
                    type: string
                    format: date-time
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized: No active session
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: User not found
        '500':
          description: Server error
  /users:
    get:
      summary: Get all users
      tags:
        - Users
      responses:
        '200':
          description: A list of users
    post:
      summary: Create a new user (same as register)
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                username:
                  type: string
                  example: newuser
                email:
                  type: string
                  format: email
                  example: new@example.com
                password:
                  type: string
                  format: password
                  example: newpassword123
      responses:
        '201':
          description: User created successfully
        '400':
          description: Bad request
  /users/{id}:
    get:
      summary: Get a user by ID
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the user to retrieve
      responses:
        '200':
          description: A single user
        '404':
          description: User not found
    put:
      summary: Update a user by ID
      tags:
        - Users
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the user to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
      responses:
        '200':
          description: User updated successfully
        '401':
          description: Unauthorized
        '404':
          description: User not found
    delete:
      summary: Delete a user by ID
      tags:
        - Users
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the user to delete
      responses:
        '204':
          description: User deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: User not found
  /posts:
    get:
      summary: Get all posts
      tags:
        - Posts
      responses:
        '200':
          description: A list of posts
    post:
      summary: Create a new post
      tags:
        - Posts
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
      responses:
        '201':
          description: Post created successfully
        '401':
          description: Unauthorized
  /posts/{id}:
    get:
      summary: Get a post by ID
      tags:
        - Posts
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the post to retrieve
      responses:
        '200':
          description: A single post
        '404':
          description: Post not found
    put:
      summary: Update a post by ID
      tags:
        - Posts
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the post to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
      responses:
        '200':
          description: Post updated successfully
        '401':
          description: Unauthorized
        '404':
          description: Post not found
    delete:
      summary: Delete a post by ID
      tags:
        - Posts
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the post to delete
      responses:
        '204':
          description: Post deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: Post not found
  /comments:
    post:
      summary: Create a new comment
      tags:
        - Comments
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                postId:
                  type: string
                content:
                  type: string
      responses:
        '201':
          description: Comment created successfully
        '401':
          description: Unauthorized
  /comments/post/{postId}:
    get:
      summary: Get comments by Post ID
      tags:
        - Comments
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: string
          description: ID of the post to retrieve comments for
      responses:
        '200':
          description: A list of comments for the specified post
        '404':
          description: Post not found
  /comments/{id}:
    get:
      summary: Get a comment by ID
      tags:
        - Comments
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the comment to retrieve
      responses:
        '200':
          description: A single comment
        '404':
          description: Comment not found
    put:
      summary: Update a comment by ID
      tags:
        - Comments
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the comment to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        '200':
          description: Comment updated successfully
        '401':
          description: Unauthorized
        '404':
          description: Comment not found
    delete:
      summary: Delete a comment by ID
      tags:
        - Comments
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the comment to delete
      responses:
        '204':
          description: Comment deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: Comment not found
  /likes:
    post:
      summary: Like a post or comment
      tags:
        - Likes
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                postId:
                  type: string
                  description: ID of the post to like (optional)
                commentId:
                  type: string
                  description: ID of the comment to like (optional)
              minProperties: 1
              maxProperties: 1
      responses:
        '201':
          description: Liked successfully
        '401':
          description: Unauthorized
    delete:
      summary: Unlike a post or comment
      tags:
        - Likes
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                postId:
                  type: string
                  description: ID of the post to unlike (optional)
                commentId:
                  type: string
                  description: ID of the comment to unlike (optional)
              minProperties: 1
              maxProperties: 1
      responses:
        '204':
          description: Unliked successfully
        '401':
          description: Unauthorized
        '404':
          description: Like not found
  /likes/post/{postId}:
    get:
      summary: Get likes for a specific post
      tags:
        - Likes
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: string
          description: ID of the post to retrieve likes for
      responses:
        '200':
          description: A list of likes for the specified post
        '404':
          description: Post not found
components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionId
      description: Session ID cookie for authentication
